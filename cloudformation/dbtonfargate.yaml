Description: >- 
  This stack is meant to deploy various core components which related to the
  dbt on fargate solution. These components are:
    - S3 bucket
    - ECR
    - Fargate
    - AWS Secrets Manager
    - IAM Policies

Parameters:
  TAGContact:
    Description: Name of the person who is responsible for these Resources.
    Type: String
    Default: "John Doe"
  TAGEnv:
    Description: Environment DEV/TEST/PROD
    Type: String
    Default: "dev"
  ECRName:
    Description: ECR which would hold the dbt docker image
    Type: String
    Default: "dbtdkr"
  # SecretsMgrSecrets:
  #   Description: The snowflake secrets data which are set in resource DPSecretsMgr.
  #   Type: String
  #   NoEcho: true
  #   Default: '
  #   {
  #     "SNOWSQL_ACCOUNT": "abc.us-east-1",
  #     "SNOWSQL_USER": "SOMEBODY",
  #     "DBT_PASSWORD": "abracadabra",
  #     "SNOWSQL_ROLE": "PUBLIC",
  #     "SNOWSQL_DATABASE": "DEMO_DB",
  #     "SNOWSQL_WAREHOUSE": "DEMO_WH"
  #   }
  # '

Resources:
  CodeStageBKT:
    Type: AWS::S3::Bucket
    Description: >-
      The bucket where the dbt code and other dependentant run time 
      artifacts are hosted. This bucket should not contain any data 
      or logs or secrets.
    Properties:
      Tags:
        - Key: CFStack
          Value: !Ref AWS::StackName
        - Key: Contact
          Value: !Ref TAGContact
        - Key: Environment
          Value: !Ref TAGEnv
  # DPSecretsMgr:
  #   Type: AWS::SecretsManager::Secret
  #   Description: >-
  #     Holds secrets related for connecting to Snowflake. This will be used
  #     by various data transformation pipelines.
  #   Properties:
  #     Name: !Join [ "/", [ !Ref "AWS::StackName" ,!Ref TAGEnv ,"SFLKConn"  ] ]
  #     SecretString: !Ref SecretsMgrSecrets
  #     Tags:
  #       - Key: CFStack
  #         Value: !Ref AWS::StackName
  #       - Key: Contact
  #         Value: !Ref TAGContact
  #       - Key: Environment
  #         Value: !Ref TAGEnv
  DPLogGroup:
    Type: AWS::Logs::LogGroup
    Description: Used to capture all logs generated by dbt processes.
    Properties:
      LogGroupName: !Join [ "/", [ !Ref "AWS::StackName" ,!Ref TAGEnv ,"DPLogGroup"  ] ]
      RetentionInDays: 1
  DPECS:
    Type: AWS::ECS::Cluster
    #Description: The fargate cluster used for Used by various dbt data pipeline processes.
    Properties:
      ClusterName: !Join [ "_", [ !Ref "AWS::StackName" ,!Ref TAGEnv ,"DPECS"  ] ]
      Tags:
        - Key: CFStack
          Value: !Ref AWS::StackName
        - Key: contact
          Value: !Ref TAGContact
        - Key: Environment
          Value: !Ref TAGEnv
  DPDBTECR:
    Type: AWS::ECR::Repository
    Description: Used for storing images used for data pipeline processes or others."
    Properties:
      RepositoryName: !Join [ "-", [ !Ref "AWS::StackName",!Ref TAGEnv ,!Ref ECRName  ] ] 
      Tags:
        - Key: CFStack
          Value: !Ref AWS::StackName
        - Key: contact
          Value: !Ref TAGContact
        - Key: Environment
          Value: !Ref TAGEnv
  ECSRole:
    Type: AWS::IAM::Role
    #Ref: https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/ECS/FargateLaunchType/clusters/public-vpc.yml
    Properties:
      Description: >-
        This is an IAM role which authorizes ECS to manage resources on your
        account on your behalf, such as updating your load balancer with the
        details of where your containers are, so that traffic can reach your
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    #Ref: https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/ECS/FargateLaunchType/clusters/public-vpc.yml
    Properties:
      Description: >-
        This is a role which is used by the ECS tasks themselves.
        Tasks in Amazon ECS define the containers that should be 
        deployed together and the resources they require from a 
        compute/memory perspective. 
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
  # DPDBTFargateTaskRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     Description: >-
  #       This role is used by the task container instance, which runs the dbt
  #       model transformation.
  #     RoleName: !Join [ "_", [ !Ref "AWS::StackName" ,!Ref TAGEnv ,!Ref "AWS::Region" ,"DPDBTFargateTaskRole"  ] ]
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - ecs.amazonaws.com
  #           - ecs-tasks.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Tags:
  #       - Key: CFStack
  #         Value: !Ref AWS::StackName
  #       - Key: contact
  #         Value: !Ref TAGContact
  #       - Key: Environment
  #         Value: !Ref TAGEnv
  #     Policies:
  #     - PolicyName: inline-DPDBTFargateTaskRole
  #       PolicyDocument:
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #             - 'secretsmanager:GetSecretValue'
  #             - 'secretsmanager:ListSecrets'
  #           Resource: !Ref DPSecretsMgr
  #         - Effect: Allow
  #           Action:
  #             - 's3:GetObject'
  #             - 's3:ListBucket'
  #           Resource: 
  #             - !GetAtt CodeStageBKT.Arn
  #             - !Join [ "/", [ !GetAtt CodeStageBKT.Arn ,"*"  ] ]
        
Outputs:
  AWSDeployedRegion:
    Description: "The region in which this stack is deployed"
    Value: !Ref "AWS::Region"
    Export:
      Name: !Sub "${AWS::StackName}-${TAGEnv}-AWSDeployedRegion"
  CodeStageBKTName:
    Description: "The CodeStageBKT S3 name"
    Value: !Ref CodeStageBKT
    Export:
      Name: !Sub "${AWS::StackName}-${TAGEnv}-CodeStageBKTName"
  CodeStageBKTId:
    Description: "The CodeStageBKT s3 url"
    Value: !Join ['', ['s3://', !Ref CodeStageBKT]]
    Export:
      Name: !Sub "${AWS::StackName}-${TAGEnv}-CodeStageBKTId"
  CodeStageBKTArn:
    Description: "The Arn for the CodeStageBKT"
    Value: !GetAtt [CodeStageBKT, Arn]
    Export:
      Name: !Sub "${AWS::StackName}-${TAGEnv}-CodeStageBKTArn"
  # DPSecretsMgrId:
  #       Description: "The secrets manager used for storing dbt workloads"
  #       Value: !Ref DPSecretsMgr
  #       Export:
  #         Name: !Sub "${AWS::StackName}-${TAGEnv}-DPSecretsMgr"
  DPLogGroupId:
    Description: "The log group Used to capture all logs generated by DBT datapipeline process."
    Value: !GetAtt [DPLogGroup, Arn]
    Export:
      Name: !Sub "${AWS::StackName}-${TAGEnv}-DPLogGroup"
  DPLogGroupUrl:
        Description: "The log group Used to capture all logs generated by DBT datapipeline process."
        Value: !Ref DPLogGroup
        Export:
          Name: !Sub "${AWS::StackName}-${TAGEnv}-DPLogGroupURL"
  DPECSId:
    Description: "The ECS cluster id used for data pipeline processes."
    Value: !Ref DPECS
    Export:
      Name: !Sub "${AWS::StackName}-${TAGEnv}-DPECS"
  DPDBTECRId:
    Description: "The ECR used for hosting docker images which are used for DBT data pipeline processing."
    Value: !GetAtt [DPDBTECR, Arn]
    Export:
      Name: !Sub "${AWS::StackName}-${TAGEnv}-DPDBTECR"
  DPDBTECRRef:
    Description: "The ECR used for hosting docker images which are used for DBT data pipeline processing. as Ref"
    Value: !Ref DPDBTECR
    Export:
      Name: !Sub "${AWS::StackName}-${TAGEnv}-DPDBTECR-Ref"

  # DPDBTFargateTaskRole:
  #   Description: "The DPDBTFargateTaskRole"
  #   Value: !GetAtt [DPDBTFargateTaskRole, Arn]
  #   Export:
  #       Name: !Sub "${AWS::StackName}-${TAGEnv}-DPDBTFargateTaskRole-Arn"

  ECSTaskExecutionRole:
    Description: "The ECSTaskExecutionRole"
    Value: !GetAtt [ECSTaskExecutionRole, Arn]
    Export:
        Name: !Sub "${AWS::StackName}-${TAGEnv}-ECSTaskExecutionRole-Arn"